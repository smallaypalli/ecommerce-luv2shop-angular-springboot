name: CI/CD - AWS EC2 + ECS Container

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
 #   branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name : Configure AWS and Docker Credentials
      uses : aws-actions/configure-aws-credentials@v1
      with :
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
    #- name: Set up SSH Key
     # run: |
      #   mkdir -p ~/.ssh
       #  echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/productization
        # chmod 600 ~/.ssh/productization

    - name : Checkout repository
      uses : actions/checkout@v4  #checkout the repo
# Setting up docker
    - name: Check docker version
      run: docker --version #verify docker installation

    - name: Setup docker buildx (this is needed for docker build and pushing images)
      uses: docker/setup-buildx-action@v2
# Login to Docker Hub
    - name: Login to dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_USER}}
        password: ${{secrets.DOCKER_KEY}}

    - name: current directory
      run: pwd
# Build docker image
    - name: create docker image for backend
      run : docker build --no-cache -f Dockerfile-backend -t sreemare/ecomm-app:latest .
# Push docker image to docker hub
    - name: push docker image to docker hub
      run: |
        docker push sreemare/ecomm-app:latest


#    - name: Create ECR repository (optional)
#      run: |
#        aws ecr create-repository --repository-name ecomm-app --region ${{ secrets.AWS_REGION }} || echo "Repository already exists"

#    - name: Login to Amazon ECR
#      run: |
#        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

#    - name: Push image to ECR (optional)
#      run: |
#        docker tag sreemare/ecomm-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecomm-app:latest
#        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecomm-app:latest

    - name: Create ECS cluster (if not already created)
      run: |
        aws ecs create-cluster --cluster-name ecomm-cluster --region ${{ secrets.AWS_REGION }} || echo "Cluster already exists"

    - name: Create Task Definition for MySQL and App containers
      run: |
        aws ecs register-task-definition --family ecomm-task-definition \
          --network-mode awsvpc \
          --requires-compatibilities "FARGATE" \
          --execution-role-arn arn:aws:iam::234464728607:role/ecomAppEcsTaskExecutionRole \
          --cpu 512 \
          --memory 1024 \
          --container-definitions '[{
            "name": "mysqlservice",
            "image": "mysql:8",
            "memory": 512,
            "cpu":256,
            "essential": true,
            "environment": [
              {"name": "MYSQL_ROOT_PASSWORD", "value": "root"},
              {"name": "MYSQL_DATABASE", "value": "mysql"}
            ],
            "portMappings": [
              {"containerPort": 3306, "hostPort": 3306}
            ]
          }, {
            "name": "ecomm-app",
            "image": "sreemare/ecomm-app:latest",
            "memory": 512,
            "cpu":256,
            "essential": true,
            "portMappings": [
              {"containerPort": 8080, "hostPort": 8080}
            ],
            "environment": [
                {"name": "SPRING_DATASOURCE_URL", "value": "jdbc:mysql://mysqlservice:3306/mysql?allowPublicKeyRetrieval=true&useSSL=false"},
                {"name": "SPRING_DATASOURCE_USERNAME", "value": "root"},
                {"name": "SPRING_DATASOURCE_PASSWORD", "value": "root"}
            ],
            "dependsOn": [
              {
                "containerName": "mysqlservice",
                "condition": "START"
              }
            ],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/ecomm-app",
                    "awslogs-region": "${{secrets.AWS_REGION}}",
                    "awslogs-stream-prefix": "ecomm-app"
                }
            }
          }]'

    - name: Create ECS Service for MySQL
      run: |
        aws ecs create-service --cluster ecomm-cluster \
          --service-name mysqlservice \
          --task-definition ecomm-task-definition \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-068bf1f3dddea1a68], securityGroups=[sg-044be64114fb8509c], assignPublicIp=ENABLED}" \
          --region ${{ secrets.AWS_REGION }}

    - name: Wait for MySQL to Start
      run: sleep 60  # Wait 60 seconds for MySQL to initialize

    - name: Get MySQL Task IP
      run: |
        MYSQL_IP=$(aws ecs list-tasks --cluster ecomm-cluster --service-name mysqlservice \
          --query "taskArns[0]" --output text | xargs -I {} \
          aws ecs describe-tasks --cluster ecomm-cluster --tasks {} \
          --query "tasks[0].containers[0].networkInterfaces[0].privateIpv4Address" --output text)
        echo "MYSQL_IP=$MYSQL_IP" >> $GITHUB_ENV
        echo "MySQL is running at $MYSQL_IP"

    - name: Create ECS Service for ecomm-app
      run: |
        aws ecs create-service --cluster ecomm-cluster \
          --service-name ecomm-app-service \
          --task-definition ecomm-task-definition \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-068bf1f3dddea1a68], securityGroups=[sg-044be64114fb8509c], assignPublicIp=ENABLED}" \
          --region ${{ secrets.AWS_REGION }}
