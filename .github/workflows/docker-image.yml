name: Build and Push to AWS ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name : Configure AWS and Docker Credentials
      uses : aws-actions/configure-aws-credentials@v1
      with :
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
    #- name: Set up SSH Key
     # run: |
      #   mkdir -p ~/.ssh
       #  echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/productization
        # chmod 600 ~/.ssh/productization

    - name : Checkout repository
      uses : actions/checkout@v4  #checkout the repo
# Setting up docker
    - name: Check docker version
      run: docker --version #verify docker installation

    - name: Setup docker buildx (this is needed for docker build and pushing images)
      uses: docker/setup-buildx-action@v2
# Login to Docker Hub
    - name: Login to dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_USER}}
        password: ${{secrets.DOCKER_KEY}}

    - name: current directory
      run: pwd
# Build docker image
    - name: create docker image for backend
      run : docker build --no-cache -f Dockerfile-backend -t sreemare/ecomm-app:latest .
# Push docker image to docker hub
    - name: push docker image to docker hub
      run: |
        docker push sreemare/ecomm-app:latest

# Pull the image and run container
    - name : Launch EC2 Instance
      id: ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
           --image-id ami-08ea187523fb45736 \
           --instance-type t2.micro \
           --key-name productization \
           --security-group-ids sg-044be64114fb8509c \
           --subnet-id subnet-068bf1f3dddea1a68 \
           --associate-public-ip-address \
           --query 'Instances[0].InstanceId' --output text)
         echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
    - name: Wait for EC2 to be Running
      run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}
    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids ${{ env.INSTANCE_ID }} \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
            echo "EC2 instance is running at: $PUBLIC_IP"
    - name: Wait for EC2 . Sleep 60 secs
      run : sleep 60

    - name:  SSH to EC2 and Containerize app
      run: |
        sudo apt update && sudo apt install -y openssh-client
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
# create the network as mysql and app should be in the same network
          docker network create sree-network
# run the mysql service.
          docker run -d --name mysqlservice --network sree-network \
            -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mysql \
            -p 3306:3306 mysql:8
# pull the ecomm ap and run the container         
          docker pull sreemare/ecomm-app:latest
          docker run -d -p 8080:8443 --name ecomm-app \
             --network sree-network sreemare/ecomm-app:latest
        EOF